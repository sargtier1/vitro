name: Pull Request Checks

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.15.0'

jobs:
  # Skip if draft PR
  check-draft:
    name: Check if Draft
    runs-on: ubuntu-latest
    outputs:
      is-draft: ${{ steps.check.outputs.is-draft }}
    steps:
      - name: Check if PR is draft
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "is-draft=true" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping checks for draft PR"
          else
            echo "is-draft=false" >> $GITHUB_OUTPUT
            echo "✅ PR is ready for review"
          fi

  # Fast feedback loop for PRs
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment
        run: echo 'DATABASE_URL="postgresql://test:test@localhost:5432/test_db"' > .env

      - name: Database generation
        run: pnpm db:generate

      - name: Biome format check
        run: pnpm biome:check

      - name: Type checking
        run: pnpm type-check

      - name: Linting
        run: pnpm lint

  # Comprehensive testing
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [check-draft, quick-checks]
    if: needs.check-draft.outputs.is-draft == 'false'
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Database generation
        run: pnpm db:generate

      - name: Run tests
        run: pnpm test

  # Build verification
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [check-draft, quick-checks]
    if: needs.check-draft.outputs.is-draft == 'false'
    strategy:
      matrix:
        app: [web, api]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Database generation
        run: pnpm db:generate

      - name: Build ${{ matrix.app }}
        run: pnpm --filter @repo/${{ matrix.app }} build

      - name: Verify build output
        run: |
          if [ "${{ matrix.app }}" = "web" ]; then
            if [ ! -d "apps/web/dist" ]; then
              echo "❌ Web build failed - no dist directory"
              exit 1
            fi
            echo "✅ Web build successful"
          elif [ "${{ matrix.app }}" = "api" ]; then
            if [ ! -d "apps/api/.output" ]; then
              echo "❌ API build failed - no .output directory"
              exit 1
            fi
            echo "✅ API build successful"
          fi

  # Security checks for PRs
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Audit dependencies
        run: pnpm audit --audit-level high

  # Final status check
  all-checks:
    name: All Checks Complete
    runs-on: ubuntu-latest
    needs: [quick-checks, test-suite, build-check, security-check]
    if: always() && needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.quick-checks.result }}" = "success" ] && \
             [ "${{ needs.test-suite.result }}" = "success" ] && \
             [ "${{ needs.build-check.result }}" = "success" ] && \
             [ "${{ needs.security-check.result }}" = "success" ]; then
            echo "✅ All checks passed! PR is ready to merge."
            echo "## ✅ All Checks Passed" >> $GITHUB_STEP_SUMMARY
            echo "This pull request has successfully passed all required checks and is ready to be merged into main." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some checks failed. Please review and fix the issues."
            echo "## ❌ Some Checks Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed checks and fix any issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi