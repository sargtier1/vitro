name: Northflank Integration

on:
  workflow_run:
    workflows: ["Trunk-Based Deployment"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if build artifacts are missing'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.15.0'

jobs:
  # Check if we should proceed with Northflank integration
  check-deployment-readiness:
    name: Check Deployment Readiness
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      config-exists: ${{ steps.check-config.outputs.exists }}
      should-deploy: ${{ steps.should-deploy.outputs.deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for Northflank config
        id: check-config
        run: |
          if [ -f ".northflank.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Northflank configuration found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No Northflank configuration found"
            echo "Run 'pnpm infra:setup' to create .northflank.json"
          fi

      - name: Should deploy check
        id: should-deploy
        run: |
          if [ "${{ steps.check-config.outputs.exists }}" = "true" ] || [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  # Prepare deployment instructions and verify builds
  prepare-northflank-deployment:
    name: Prepare Northflank Deployment
    runs-on: ubuntu-latest
    needs: check-deployment-readiness
    if: needs.check-deployment-readiness.outputs.should-deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment
        run: echo 'DATABASE_URL="postgresql://test:test@localhost:5432/test_db"' > .env

      - name: Generate database types
        run: pnpm db:generate

      - name: Build for Northflank
        run: |
          echo "🏗️ Building applications for Northflank deployment..."
          pnpm turbo build --filter=@repo/api
          pnpm turbo build --filter=@repo/web

      - name: Verify build outputs
        run: |
          echo "## 🔍 Build Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "apps/api/.output" ]; then
            api_size=$(du -sh apps/api/.output | cut -f1)
            echo "✅ **API Build:** $api_size" >> $GITHUB_STEP_SUMMARY
            echo "   - Location: \`apps/api/.output/\`" >> $GITHUB_STEP_SUMMARY
            echo "   - Entry: \`apps/api/.output/server/index.mjs\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **API Build:** Missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "apps/web/dist" ]; then
            web_size=$(du -sh apps/web/dist | cut -f1)
            echo "✅ **Web Build:** $web_size" >> $GITHUB_STEP_SUMMARY
            echo "   - Location: \`apps/web/dist/\`" >> $GITHUB_STEP_SUMMARY
            echo "   - Static files ready for deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Web Build:** Missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Generate Northflank deployment guide
        run: |
          if [ -f ".northflank.json" ]; then
            PROJECT_NAME=$(cat .northflank.json | grep -o '"projectName":"[^"]*"' | cut -d'"' -f4)
            REPO_URL=$(cat .northflank.json | grep -o '"repoUrl":"[^"]*"' | cut -d'"' -f4)
            API_URL=$(cat .northflank.json | grep -o '"apiUrl":"[^"]*"' | cut -d'"' -f4)
            WEB_URL=$(cat .northflank.json | grep -o '"webUrl":"[^"]*"' | cut -d'"' -f4)
          else
            PROJECT_NAME="vitro-app"
            REPO_URL="${{ github.server_url }}/${{ github.repository }}"
            API_URL="https://api-vitro-app.northflank.app"
            WEB_URL="https://web-vitro-app.northflank.app"
          fi

          echo "## 🚀 Northflank Deployment Guide" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Manual Setup Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Go to [Northflank Dashboard](https://app.northflank.com)**" >> $GITHUB_STEP_SUMMARY
          echo "2. **Create Project:** \`$PROJECT_NAME\` in **US Central** region" >> $GITHUB_STEP_SUMMARY
          echo "3. **Add PostgreSQL Addon** (free tier available)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Service Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### API Service" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Source:** \`$REPO_URL\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Command:** \`pnpm install && pnpm db:generate && pnpm turbo build --filter=@repo/api\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Start Command:** \`node apps/api/.output/server/index.mjs\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Port:** \`3001\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected URL:** $API_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Web Service" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Source:** \`$REPO_URL\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Command:** \`pnpm install && pnpm turbo build --filter=@repo/web\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Publish Directory:** \`apps/web/dist\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected URL:** $WEB_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔑 Environment Variables" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### API Service" >> $GITHUB_STEP_SUMMARY
          echo "- \`DATABASE_URL\`: From PostgreSQL addon" >> $GITHUB_STEP_SUMMARY
          echo "- \`BETTER_AUTH_SECRET\`: 32+ character secret" >> $GITHUB_STEP_SUMMARY
          echo "- \`NODE_ENV\`: \`production\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`NITRO_PORT\`: \`3001\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Web Service" >> $GITHUB_STEP_SUMMARY
          echo "- \`VITE_API_URL\`: $API_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Deployment Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts for Northflank
        uses: actions/upload-artifact@v4
        with:
          name: northflank-deployment-ready
          path: |
            apps/api/.output/
            apps/web/dist/
            .northflank.json
          retention-days: 30

  # Future: This job can be enhanced to use Northflank CLI when available
  northflank-cli-deployment:
    name: Northflank CLI Deployment (Future)
    runs-on: ubuntu-latest
    needs: prepare-northflank-deployment
    if: false  # Disabled until Northflank CLI is available
    steps:
      - name: Placeholder for future CLI deployment
        run: |
          echo "🚧 This job is reserved for future Northflank CLI integration"
          echo "💡 Currently, deployment requires manual setup via Northflank Dashboard"
          echo "📖 See the deployment guide in the previous job's summary"